Microsoft (R) Macro Assembler Version 14.29.30139.0	    01/23/22 14:40:47
#Program Template     (template.asm			     Page 1 - 1


				TITLE Program Template     (template.asm)

				; Author: Devon Braner
				; Last Modified:
				; OSU email address: branerd@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project 1        Due Date: 1/24/2022
				; Description: Displays name, program title, and instructions for user. Prompts user to enter 3 numbers in descending order,
				;				calculates and displays sum & differences. Displays a closing message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data

					; intro and instructions:
 00000000 42 61 73 69 63		intro			BYTE	"Basic Logic and Arithmetic Program		by Devon Braner",0
	   20 4C 6F 67 69
	   63 20 61 6E 64
	   20 41 72 69 74
	   68 6D 65 74 69
	   63 20 50 72 6F
	   67 72 61 6D 09
	   09 62 79 20 44
	   65 76 6F 6E 20
	   42 72 61 6E 65
	   72 00
 00000034 50 6C 65 61 73		instructions	BYTE	"Please enter 3 numbers. They must be in descending order: A > B > C. The program will calculate their sums and differences.",0
	   65 20 65 6E 74
	   65 72 20 33 20
	   6E 75 6D 62 65
	   72 73 2E 20 54
	   68 65 79 20 6D
	   75 73 74 20 62
	   65 20 69 6E 20
	   64 65 73 63 65
	   6E 64 69 6E 67
	   20 6F 72 64 65
	   72 3A 20 41 20
	   3E 20 42 20 3E
	   20 43 2E 20 54
	   68 65 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 63 61 6C 63
	   75 6C 61 74 65
	   20 74 68 65 69
	   72 20 73 75 6D
	   73 20 61 6E 64
	   20 64 69 66 66
	   65 72 65 6E 63
	   65 73 2E 00

					; EXTRA CREDIT details:
 000000B0 2A 2A 45 43 3A		ec1_description	BYTE	"**EC: Repeat until the user chooses to quit.",0
	   20 52 65 70 65
	   61 74 20 75 6E
	   74 69 6C 20 74
	   68 65 20 75 73
	   65 72 20 63 68
	   6F 6F 73 65 73
	   20 74 6F 20 71
	   75 69 74 2E 00
 000000DD 2A 2A 45 43 3A		ec2_description	BYTE	"**EC: Verify descending order.",0
	   20 56 65 72 69
	   66 79 20 64 65
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2E
	   00
 000000FC 2A 2A 45 43 3A		ec3_description	BYTE	"**EC: Computes B-A, C-A, C-B, C-B-A. Handles negative results.",0
	   20 43 6F 6D 70
	   75 74 65 73 20
	   42 2D 41 2C 20
	   43 2D 41 2C 20
	   43 2D 42 2C 20
	   43 2D 42 2D 41
	   2E 20 48 61 6E
	   64 6C 65 73 20
	   6E 65 67 61 74
	   69 76 65 20 72
	   65 73 75 6C 74
	   73 2E 00
 0000013B 2A 2A 45 43 3A		ec4_description	BYTE	"**EC: Calculates and displays A/B, A/C, B/C. Prints Quotient and Remainder.",0
	   20 43 61 6C 63
	   75 6C 61 74 65
	   73 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 73 20
	   41 2F 42 2C 20
	   41 2F 43 2C 20
	   42 2F 43 2E 20
	   50 72 69 6E 74
	   73 20 51 75 6F
	   74 69 65 6E 74
	   20 61 6E 64 20
	   52 65 6D 61 69
	   6E 64 65 72 2E
	   00
 00000187 54 68 65 20 6E		ec2_bad_value	BYTE	"The number you entered is not less than the previous number...",0
	   75 6D 62 65 72
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 20 69 73
	   20 6E 6F 74 20
	   6C 65 73 73 20
	   74 68 61 6E 20
	   74 68 65 20 70
	   72 65 76 69 6F
	   75 73 20 6E 75
	   6D 62 65 72 2E
	   2E 2E 00
					
					; prompts and variables for user input:
 000001C6 46 69 72 73 74		prompt_1		BYTE	"First Number: ",0
	   20 4E 75 6D 62
	   65 72 3A 20 00
 000001D5 00000000			num_A			DWORD	?
 000001D9 53 65 63 6F 6E		prompt_2		BYTE	"Second Number: ",0
	   64 20 4E 75 6D
	   62 65 72 3A 20
	   00
 000001E9 00000000			num_B			DWORD	?
 000001ED 54 68 69 72 64		prompt_3		BYTE	"Third Number: ",0
	   20 4E 75 6D 62
	   65 72 3A 20 00
 000001FC 00000000			num_C			DWORD	?
					
					; values to be calculated:
 00000200 00000000			AB_sum			DWORD	?
 00000204 00000000			AB_difference	DWORD	?
 00000208 00000000			AC_sum			DWORD	?
 0000020C 00000000			AC_difference	DWORD	?
 00000210 00000000			BC_sum			DWORD	?
 00000214 00000000			BC_difference	DWORD	?
 00000218 00000000			ABC_sum			DWORD	?

					; for results display:
 0000021C 20 2B 20 00			plus			BYTE	" + ",0
 00000220 20 2D 20 00			minus			BYTE	" - ",0
 00000224 20 3D 20 00			equals			BYTE	" = ",0

					; EXTRA CREDIT for results display:
 00000228 20 2F 20 00			divided_by		BYTE	" / ",0
 0000022C 20 77 69 74 68		remainder		BYTE	" with remainder: ",0
	   20 72 65 6D 61
	   69 6E 64 65 72
	   3A 20 00

					; EXTRA CREDIT values to be calculated
 0000023E 00000000			BA_difference	SDWORD	?
 00000242 00000000			CA_difference	SDWORD	?
 00000246 00000000			CB_difference	SDWORD	?
 0000024A 00000000			CBA_difference	SDWORD	?
					
 0000024E 00000000			AB_quotient		DWORD	?
 00000252 00000000			AB_remainder	DWORD	?
 00000256 00000000			AC_quotient		DWORD	?
 0000025A 00000000			AC_remainder	DWORD	?
 0000025E 00000000			BC_quotient		DWORD	?
 00000262 00000000			BC_remainder	DWORD	?

					; Closing message
 00000266 54 68 61 6E 6B		goodbye			BYTE	"Thanks for using this program! Bye...",0
	   73 20 66 6F 72
	   20 75 73 69 6E
	   67 20 74 68 69
	   73 20 70 72 6F
	   67 72 61 6D 21
	   20 42 79 65 2E
	   2E 2E 00
 0000028C 2E 2E 2E 20 42		EC_goodbye		BYTE	"... But if you would like to continue, press 1 then Enter. If you're done, simply press Enter.",0
	   75 74 20 69 66
	   20 79 6F 75 20
	   77 6F 75 6C 64
	   20 6C 69 6B 65
	   20 74 6F 20 63
	   6F 6E 74 69 6E
	   75 65 2C 20 70
	   72 65 73 73 20
	   31 20 74 68 65
	   6E 20 45 6E 74
	   65 72 2E 20 49
	   66 20 79 6F 75
	   27 72 65 20 64
	   6F 6E 65 2C 20
	   73 69 6D 70 6C
	   79 20 70 72 65
	   73 73 20 45 6E
	   74 65 72 2E 00
 000002EB 00000000			continue_prompt	DWORD	?


 00000000			.code
 00000000			main PROC

 00000000				_start:
					; Introduce program and display instructions
 00000000  BA 00000000 R		MOV		EDX, OFFSET intro
 00000005  E8 00000000 E		CALL	WriteString
 0000000A  E8 00000000 E		CALL	CrLf

 0000000F  BA 000000B0 R		MOV		EDX, OFFSET ec1_description
 00000014  E8 00000000 E		CALL	WriteString
 00000019  E8 00000000 E		CALL	CrLf

 0000001E  BA 000000DD R		MOV		EDX, OFFSET ec2_description
 00000023  E8 00000000 E		CALL	WriteString
 00000028  E8 00000000 E		CALL	CrLf

 0000002D  BA 000000FC R		MOV		EDX, OFFSET ec3_description
 00000032  E8 00000000 E		CALL	WriteString
 00000037  E8 00000000 E		CALL	CrLf

 0000003C  BA 0000013B R		MOV		EDX, OFFSET ec4_description
 00000041  E8 00000000 E		CALL	WriteString
 00000046  E8 00000000 E		CALL	CrLf

 0000004B  BA 00000034 R		MOV		EDX, OFFSET instructions
 00000050  E8 00000000 E		CALL	WriteString
 00000055  E8 00000000 E		CALL	CrLf

					; Get numbers from user and EXTRA CREDIT: check that they are in descending order
 0000005A  BA 000001C6 R		MOV		EDX, OFFSET prompt_1
 0000005F  E8 00000000 E		CALL	WriteString
 00000064  E8 00000000 E		CALL	ReadDec
 00000069  A3 000001D5 R		MOV		num_A, EAX

 0000006E  BA 000001D9 R		MOV		EDX, OFFSET prompt_2
 00000073  E8 00000000 E		CALL	WriteString
 00000078  E8 00000000 E		CALL	ReadDec
 0000007D  A3 000001E9 R		MOV		num_B, EAX

 00000082  A1 000001D5 R		MOV		EAX, num_A
 00000087  3B 05 000001E9 R		CMP		EAX, num_B
 0000008D  76 2A			JNA		_not_descending
 0000008F  EB 00			JMP		_continue

 00000091				_continue:
 00000091  BA 000001ED R		MOV		EDX, OFFSET prompt_3
 00000096  E8 00000000 E		CALL	WriteString
 0000009B  E8 00000000 E		CALL	ReadDec
 000000A0  A3 000001FC R		MOV		num_C, EAX
 000000A5  E8 00000000 E		CALL	CrLf

 000000AA  A1 000001E9 R		MOV		EAX, num_B
 000000AF  3B 05 000001FC R		CMP		EAX, num_C
 000000B5  76 02			JNA		_not_descending
 000000B7  EB 14			JMP		_calculations

					; call out not descending numbers.
 000000B9				_not_descending:
 000000B9  BA 00000187 R		MOV		EDX, OFFSET ec2_bad_value
 000000BE  E8 00000000 E		CALL	WriteString
 000000C3  E8 00000000 E		CALL	CrLf
 000000C8  E9 00000488			JMP		_sign_off

 000000CD				_calculations:
					; Calculate sums
 000000CD  A1 000001D5 R		MOV		EAX, num_A
 000000D2  8B 1D 000001E9 R		MOV		EBX, num_B
 000000D8  03 C3			ADD		EAX, EBX
 000000DA  A3 00000200 R		MOV		AB_sum, EAX

 000000DF  A1 000001D5 R		MOV		EAX, num_A
 000000E4  8B 1D 000001FC R		MOV		EBX, num_C
 000000EA  03 C3			ADD		EAX, EBX
 000000EC  A3 00000208 R		MOV		AC_sum, EAX

 000000F1  A1 000001E9 R		MOV		EAX, num_B
 000000F6  8B 1D 000001FC R		MOV		EBX, num_C
 000000FC  03 C3			ADD		EAX, EBX
 000000FE  A3 00000210 R		MOV		BC_sum, EAX

 00000103  A1 00000200 R		MOV		EAX, AB_sum
 00000108  8B 1D 000001FC R		MOV		EBX, num_C
 0000010E  03 C3			ADD		EAX, EBX
 00000110  A3 00000218 R		MOV		ABC_sum, EAX

					; Calculate differences
 00000115  A1 000001D5 R		MOV		EAX, num_A
 0000011A  8B 1D 000001E9 R		MOV		EBX, num_B
 00000120  2B C3			SUB		EAX, EBX
 00000122  A3 00000204 R		MOV		AB_difference, EAX

 00000127  A1 000001D5 R		MOV		EAX, num_A
 0000012C  8B 1D 000001FC R		MOV		EBX, num_C
 00000132  2B C3			SUB		EAX, EBX
 00000134  A3 0000020C R		MOV		AC_difference, EAX

 00000139  A1 000001E9 R		MOV		EAX, num_B
 0000013E  8B 1D 000001FC R		MOV		EBX, num_C
 00000144  2B C3			SUB		EAX, EBX
 00000146  A3 00000214 R		MOV		BC_difference, EAX

					; EXTRA CREDIT: handle negative results, calculate B-A, C-A, C-B, C-B-A
 0000014B  A1 000001E9 R		MOV		EAX, num_B
 00000150  8B 1D 000001D5 R		MOV		EBX, num_A
 00000156  2B C3			SUB		EAX, EBX
 00000158  A3 0000023E R		MOV		BA_difference, EAX

 0000015D  A1 000001FC R		MOV		EAX, num_C
 00000162  8B 1D 000001D5 R		MOV		EBX, num_A
 00000168  2B C3			SUB		EAX, EBX
 0000016A  A3 00000242 R		MOV		CA_difference, EAX

 0000016F  A1 000001FC R		MOV		EAX, num_C
 00000174  8B 1D 000001E9 R		MOV		EBX, num_B
 0000017A  2B C3			SUB		EAX, EBX
 0000017C  A3 00000246 R		MOV		CB_difference, EAX

 00000181  A1 00000246 R		MOV		EAX, CB_difference
 00000186  8B 1D 000001D5 R		MOV		EBX, num_A
 0000018C  2B C3			SUB		EAX, EBX
 0000018E  A3 0000024A R		MOV		CBA_difference, EAX

					; EXTRA CREDIT: calculate quotients (with remainders)
 00000193  A1 000001D5 R		MOV		EAX, num_A
 00000198  BA 00000000			MOV		EDX, 0
 0000019D  8B 1D 000001E9 R		MOV		EBX, num_B
 000001A3  F7 F3			DIV		EBX
 000001A5  A3 0000024E R		MOV		AB_quotient, EAX
 000001AA  89 15 00000252 R		MOV		AB_remainder, EDX

 000001B0  A1 000001D5 R		MOV		EAX, num_A
 000001B5  BA 00000000			MOV		EDX, 0
 000001BA  8B 1D 000001FC R		MOV		EBX, num_C
 000001C0  F7 F3			DIV		EBX
 000001C2  A3 00000256 R		MOV		AC_quotient, EAX
 000001C7  89 15 0000025A R		MOV		AC_remainder, EDX

 000001CD  A1 000001E9 R		MOV		EAX, num_B
 000001D2  BA 00000000			MOV		EDX, 0
 000001D7  8B 1D 000001FC R		MOV		EBX, num_C
 000001DD  F7 F3			DIV		EBX
 000001DF  A3 0000025E R		MOV		BC_quotient, EAX
 000001E4  89 15 00000262 R		MOV		BC_remainder, EDX

					; Display results
 000001EA  A1 000001D5 R		MOV		EAX, num_A
 000001EF  E8 00000000 E		CALL	WriteDec
 000001F4  BA 0000021C R		MOV		EDX, OFFSET plus
 000001F9  E8 00000000 E		CALL	WriteString
 000001FE  A1 000001E9 R		MOV		EAX, num_B
 00000203  E8 00000000 E		CALL	WriteDec
 00000208  BA 00000224 R		MOV		EDX, OFFSET equals
 0000020D  E8 00000000 E		CALL	WriteString
 00000212  A1 00000200 R		MOV		EAX, AB_sum
 00000217  E8 00000000 E		CALL	WriteDec
 0000021C  E8 00000000 E		CALL	CrLf

 00000221  A1 000001D5 R		MOV		EAX, num_A
 00000226  E8 00000000 E		CALL	WriteDec
 0000022B  BA 00000220 R		MOV		EDX, OFFSET minus
 00000230  E8 00000000 E		CALL	WriteString
 00000235  A1 000001E9 R		MOV		EAX, num_B
 0000023A  E8 00000000 E		CALL	WriteDec
 0000023F  BA 00000224 R		MOV		EDX, OFFSET equals
 00000244  E8 00000000 E		CALL	WriteString
 00000249  A1 00000204 R		MOV		EAX, AB_difference
 0000024E  E8 00000000 E		CALL	WriteDec
 00000253  E8 00000000 E		CALL	CrLf

 00000258  A1 000001D5 R		MOV		EAX, num_A
 0000025D  E8 00000000 E		CALL	WriteDec
 00000262  BA 0000021C R		MOV		EDX, OFFSET plus
 00000267  E8 00000000 E		CALL	WriteString
 0000026C  A1 000001FC R		MOV		EAX, num_C
 00000271  E8 00000000 E		CALL	WriteDec
 00000276  BA 00000224 R		MOV		EDX, OFFSET equals
 0000027B  E8 00000000 E		CALL	WriteString
 00000280  A1 00000208 R		MOV		EAX, AC_sum
 00000285  E8 00000000 E		CALL	WriteDec
 0000028A  E8 00000000 E		CALL	CrLf

 0000028F  A1 000001D5 R		MOV		EAX, num_A
 00000294  E8 00000000 E		CALL	WriteDec
 00000299  BA 00000220 R		MOV		EDX, OFFSET minus
 0000029E  E8 00000000 E		CALL	WriteString
 000002A3  A1 000001FC R		MOV		EAX, num_C
 000002A8  E8 00000000 E		CALL	WriteDec
 000002AD  BA 00000224 R		MOV		EDX, OFFSET equals
 000002B2  E8 00000000 E		CALL	WriteString
 000002B7  A1 0000020C R		MOV		EAX, AC_difference
 000002BC  E8 00000000 E		CALL	WriteDec
 000002C1  E8 00000000 E		CALL	CrLf

 000002C6  A1 000001E9 R		MOV		EAX, num_B
 000002CB  E8 00000000 E		CALL	WriteDec
 000002D0  BA 0000021C R		MOV		EDX, OFFSET plus
 000002D5  E8 00000000 E		CALL	WriteString
 000002DA  A1 000001FC R		MOV		EAX, num_C
 000002DF  E8 00000000 E		CALL	WriteDec
 000002E4  BA 00000224 R		MOV		EDX, OFFSET equals
 000002E9  E8 00000000 E		CALL	WriteString
 000002EE  A1 00000210 R		MOV		EAX, BC_sum
 000002F3  E8 00000000 E		CALL	WriteDec
 000002F8  E8 00000000 E		CALL	CrLf

 000002FD  A1 000001E9 R		MOV		EAX, num_B
 00000302  E8 00000000 E		CALL	WriteDec
 00000307  BA 00000220 R		MOV		EDX, OFFSET minus
 0000030C  E8 00000000 E		CALL	WriteString
 00000311  A1 000001FC R		MOV		EAX, num_C
 00000316  E8 00000000 E		CALL	WriteDec
 0000031B  BA 00000224 R		MOV		EDX, OFFSET equals
 00000320  E8 00000000 E		CALL	WriteString
 00000325  A1 00000214 R		MOV		EAX, BC_difference
 0000032A  E8 00000000 E		CALL	WriteDec
 0000032F  E8 00000000 E		CALL	CrLf

 00000334  A1 000001D5 R		MOV		EAX, num_A
 00000339  E8 00000000 E		CALL	WriteDec
 0000033E  BA 0000021C R		MOV		EDX, OFFSET plus
 00000343  E8 00000000 E		CALL	WriteString
 00000348  A1 000001E9 R		MOV		EAX, num_B
 0000034D  E8 00000000 E		CALL	WriteDec
 00000352  E8 00000000 E		CALL	WriteString		; plus already OFFSET
 00000357  A1 000001FC R		MOV		EAX, num_C
 0000035C  E8 00000000 E		CALL	WriteDec
 00000361  BA 00000224 R		MOV		EDX, OFFSET equals
 00000366  E8 00000000 E		CALL	WriteString
 0000036B  A1 00000218 R		MOV		EAX, ABC_sum
 00000370  E8 00000000 E		CALL	WriteDec
 00000375  E8 00000000 E		CALL	CrLf
 0000037A  E8 00000000 E		CALL	CrLf

					; Extra credit results: 
 0000037F  A1 000001E9 R		MOV		EAX, num_B
 00000384  E8 00000000 E		CALL	WriteDec
 00000389  BA 00000220 R		MOV		EDX, OFFSET minus
 0000038E  E8 00000000 E		CALL	WriteString
 00000393  A1 000001D5 R		MOV		EAX, num_A
 00000398  E8 00000000 E		CALL	WriteDec
 0000039D  BA 00000224 R		MOV		EDX, OFFSET equals
 000003A2  E8 00000000 E		CALL	WriteString
 000003A7  A1 0000023E R		MOV		EAX, BA_difference
 000003AC  E8 00000000 E		CALL	WriteInt
 000003B1  E8 00000000 E		CALL	CrLf

 000003B6  A1 000001FC R		MOV		EAX, num_C
 000003BB  E8 00000000 E		CALL	WriteDec
 000003C0  BA 00000220 R		MOV		EDX, OFFSET minus
 000003C5  E8 00000000 E		CALL	WriteString
 000003CA  A1 000001D5 R		MOV		EAX, num_A
 000003CF  E8 00000000 E		CALL	WriteDec
 000003D4  BA 00000224 R		MOV		EDX, OFFSET equals
 000003D9  E8 00000000 E		CALL	WriteString
 000003DE  A1 00000242 R		MOV		EAX, CA_difference
 000003E3  E8 00000000 E		CALL	WriteInt
 000003E8  E8 00000000 E		CALL	CrLf

 000003ED  A1 000001FC R		MOV		EAX, num_C
 000003F2  E8 00000000 E		CALL	WriteDec
 000003F7  BA 00000220 R		MOV		EDX, OFFSET minus
 000003FC  E8 00000000 E		CALL	WriteString
 00000401  A1 000001E9 R		MOV		EAX, num_B
 00000406  E8 00000000 E		CALL	WriteDec
 0000040B  BA 00000224 R		MOV		EDX, OFFSET equals
 00000410  E8 00000000 E		CALL	WriteString
 00000415  A1 00000246 R		MOV		EAX, CB_difference
 0000041A  E8 00000000 E		CALL	WriteInt
 0000041F  E8 00000000 E		CALL	CrLf

 00000424  A1 000001FC R		MOV		EAX, num_C
 00000429  E8 00000000 E		CALL	WriteDec
 0000042E  BA 00000220 R		MOV		EDX, OFFSET minus
 00000433  E8 00000000 E		CALL	WriteString
 00000438  A1 000001E9 R		MOV		EAX, num_B
 0000043D  E8 00000000 E		CALL	WriteDec
 00000442  E8 00000000 E		CALL	WriteString		; minus already OFFSET
 00000447  A1 000001D5 R		MOV		EAX, num_A
 0000044C  E8 00000000 E		CALL	WriteDec
 00000451  BA 00000224 R		MOV		EDX, OFFSET equals
 00000456  E8 00000000 E		CALL	WriteString
 0000045B  A1 0000024A R		MOV		EAX, CBA_difference
 00000460  E8 00000000 E		CALL	WriteInt
 00000465  E8 00000000 E		CALL	CrLf
 0000046A  E8 00000000 E		CALL	CrLf

 0000046F  A1 000001D5 R		MOV		EAX, num_A
 00000474  E8 00000000 E		CALL	WriteDec
 00000479  BA 00000228 R		MOV		EDX, OFFSET divided_by
 0000047E  E8 00000000 E		CALL	WriteString
 00000483  A1 000001E9 R		MOV		EAX, num_B
 00000488  E8 00000000 E		CALL	WriteDec
 0000048D  BA 00000224 R		MOV		EDX, OFFSET equals
 00000492  E8 00000000 E		CALL	WriteString
 00000497  A1 0000024E R		MOV		EAX, AB_quotient
 0000049C  E8 00000000 E		CALL	WriteDec
 000004A1  BA 0000022C R		MOV		EDX, OFFSET remainder
 000004A6  E8 00000000 E		CALL	WriteString
 000004AB  A1 00000252 R		MOV		EAX, AB_remainder
 000004B0  E8 00000000 E		CALL	WriteDec
 000004B5  E8 00000000 E		CALL	CrLf

 000004BA  A1 000001D5 R		MOV		EAX, num_A
 000004BF  E8 00000000 E		CALL	WriteDec
 000004C4  BA 00000228 R		MOV		EDX, OFFSET divided_by
 000004C9  E8 00000000 E		CALL	WriteString
 000004CE  A1 000001FC R		MOV		EAX, num_C
 000004D3  E8 00000000 E		CALL	WriteDec
 000004D8  BA 00000224 R		MOV		EDX, OFFSET equals
 000004DD  E8 00000000 E		CALL	WriteString
 000004E2  A1 00000256 R		MOV		EAX, AC_quotient
 000004E7  E8 00000000 E		CALL	WriteDec
 000004EC  BA 0000022C R		MOV		EDX, OFFSET remainder
 000004F1  E8 00000000 E		CALL	WriteString
 000004F6  A1 0000025A R		MOV		EAX, AC_remainder
 000004FB  E8 00000000 E		CALL	WriteDec
 00000500  E8 00000000 E		CALL	CrLf

 00000505  A1 000001E9 R		MOV		EAX, num_B
 0000050A  E8 00000000 E		CALL	WriteDec
 0000050F  BA 00000228 R		MOV		EDX, OFFSET divided_by
 00000514  E8 00000000 E		CALL	WriteString
 00000519  A1 000001FC R		MOV		EAX, num_C
 0000051E  E8 00000000 E		CALL	WriteDec
 00000523  BA 00000224 R		MOV		EDX, OFFSET equals
 00000528  E8 00000000 E		CALL	WriteString
 0000052D  A1 0000025E R		MOV		EAX, BC_quotient
 00000532  E8 00000000 E		CALL	WriteDec
 00000537  BA 0000022C R		MOV		EDX, OFFSET remainder
 0000053C  E8 00000000 E		CALL	WriteString
 00000541  A1 00000262 R		MOV		EAX, BC_remainder
 00000546  E8 00000000 E		CALL	WriteDec
 0000054B  E8 00000000 E		CALL	CrLf
 00000550  E8 00000000 E		CALL	CrLf

 00000555				_sign_off:
					; Say goodbye
 00000555  BA 00000266 R		MOV		EDX, OFFSET goodbye
 0000055A  E8 00000000 E		CALL	WriteString
 0000055F  E8 00000000 E		CALL	CrLf

					; Extra Credit continue...
 00000564  BA 0000028C R		MOV		EDX, OFFSET EC_goodbye
 00000569  E8 00000000 E		CALL	WriteString
 0000056E  E8 00000000 E		CALL	ReadDec
 00000573  A3 000002EB R		MOV		continue_prompt, EAX
 00000578  E8 00000000 E		CALL	CrLf
 0000057D  83 3D 000002EB R		CMP		continue_prompt, 1
	   01
 00000584  0F 84 FFFFFA76		JE		_start


					Invoke ExitProcess,0	; exit to operating system
 0000058A  6A 00	   *	    push   +000000000h
 0000058C  E8 00000000 E   *	    call   ExitProcess
 00000591			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    01/23/22 14:40:47
#Program Template     (template.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002EF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000591 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000591 Public STDCALL
  _start . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  _continue  . . . . . . . . . .	L Near	 00000091 _TEXT	
  _not_descending  . . . . . . .	L Near	 000000B9 _TEXT	
  _calculations  . . . . . . . .	L Near	 000000CD _TEXT	
  _sign_off  . . . . . . . . . .	L Near	 00000555 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ABC_sum  . . . . . . . . . . . .	DWord	 00000218 _DATA	
AB_difference  . . . . . . . . .	DWord	 00000204 _DATA	
AB_quotient  . . . . . . . . . .	DWord	 0000024E _DATA	
AB_remainder . . . . . . . . . .	DWord	 00000252 _DATA	
AB_sum . . . . . . . . . . . . .	DWord	 00000200 _DATA	
AC_difference  . . . . . . . . .	DWord	 0000020C _DATA	
AC_quotient  . . . . . . . . . .	DWord	 00000256 _DATA	
AC_remainder . . . . . . . . . .	DWord	 0000025A _DATA	
AC_sum . . . . . . . . . . . . .	DWord	 00000208 _DATA	
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BA_difference  . . . . . . . . .	DWord	 0000023E _DATA	
BC_difference  . . . . . . . . .	DWord	 00000214 _DATA	
BC_quotient  . . . . . . . . . .	DWord	 0000025E _DATA	
BC_remainder . . . . . . . . . .	DWord	 00000262 _DATA	
BC_sum . . . . . . . . . . . . .	DWord	 00000210 _DATA	
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CA_difference  . . . . . . . . .	DWord	 00000242 _DATA	
CBA_difference . . . . . . . . .	DWord	 0000024A _DATA	
CB_difference  . . . . . . . . .	DWord	 00000246 _DATA	
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
EC_goodbye . . . . . . . . . . .	Byte	 0000028C _DATA	
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
continue_prompt  . . . . . . . .	DWord	 000002EB _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
divided_by . . . . . . . . . . .	Byte	 00000228 _DATA	
ec1_description  . . . . . . . .	Byte	 000000B0 _DATA	
ec2_bad_value  . . . . . . . . .	Byte	 00000187 _DATA	
ec2_description  . . . . . . . .	Byte	 000000DD _DATA	
ec3_description  . . . . . . . .	Byte	 000000FC _DATA	
ec4_description  . . . . . . . .	Byte	 0000013B _DATA	
equals . . . . . . . . . . . . .	Byte	 00000224 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbye  . . . . . . . . . . . .	Byte	 00000266 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructions . . . . . . . . . .	Byte	 00000034 _DATA	
intro  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
minus  . . . . . . . . . . . . .	Byte	 00000220 _DATA	
num_A  . . . . . . . . . . . . .	DWord	 000001D5 _DATA	
num_B  . . . . . . . . . . . . .	DWord	 000001E9 _DATA	
num_C  . . . . . . . . . . . . .	DWord	 000001FC _DATA	
plus . . . . . . . . . . . . . .	Byte	 0000021C _DATA	
prompt_1 . . . . . . . . . . . .	Byte	 000001C6 _DATA	
prompt_2 . . . . . . . . . . . .	Byte	 000001D9 _DATA	
prompt_3 . . . . . . . . . . . .	Byte	 000001ED _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
remainder  . . . . . . . . . . .	Byte	 0000022C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
